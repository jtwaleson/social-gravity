// Generated by CoffeeScript 1.3.3
(function() {
  var Button, Simulation, Zoom,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Zoom = (function() {
    var factor;

    factor = 1.2;

    function Zoom(simulation) {
      var _this = this;
      this.simulation = simulation;
      this.x = 0;
      this.y = 0;
      this.zoom = 1;
      this.mousedown = false;
      $("body").draggable({
        helper: function() {
          return $("<div>").css('position', 'absolute').css('width', '100px').css('height', '100px');
        },
        start: function(event, ui) {
          _this.draglocation_x = ui.offset.left;
          return _this.draglocation_y = ui.offset.top;
        },
        stop: function(event, ui) {},
        drag: function(event, ui) {
          var dx, dy;
          dx = _this.draglocation_x - ui.offset.left;
          dy = _this.draglocation_y - ui.offset.top;
          if (Math.abs(dx) + Math.abs(dy) > 20) {
            spyglass.clear();
            _this.x += dx * _this.zoom;
            _this.y += dy * _this.zoom;
            simulation.redraw();
            _this.draglocation_x = ui.offset.left;
            return _this.draglocation_y = ui.offset.top;
          }
        }
      });
    }

    Zoom.prototype.translate_x_back = function(x) {
      return (x * this.zoom) + this.x;
    };

    Zoom.prototype.translate_y_back = function(y) {
      return (y * this.zoom) + this.y;
    };

    Zoom.prototype.translate_x = function(x) {
      return (x - this.x) / this.zoom;
    };

    Zoom.prototype.translate_y = function(y) {
      return (y - this.y) / this.zoom;
    };

    Zoom.prototype.do_zoom = function(delta, x, y) {
      var zoom_before;
      if (x == null) {
        x = $("body").width() / 2;
      }
      if (y == null) {
        y = $("body").height() / 2;
      }
      zoom_before = this.zoom;
      if (delta < 0) {
        this.zoom = this.zoom * factor;
      } else if (delta > 0) {
        this.zoom = this.zoom / factor;
      }
      this.x = (x * zoom_before + this.x) - x * this.zoom;
      this.y = (y * zoom_before + this.y) - y * this.zoom;
      return this.simulation.redraw();
    };

    Zoom.prototype.move = function(x, y) {
      this.x += x * this.zoom;
      this.y += y * this.zoom;
      return this.simulation.redraw();
    };

    return Zoom;

  })();

  Simulation = (function() {

    function Simulation() {
      this.add_friend = __bind(this.add_friend, this);

      this.add_protagonist = __bind(this.add_protagonist, this);

      this.who_is_popular_here = __bind(this.who_is_popular_here, this);

      this.message_from_gravity_worker = __bind(this.message_from_gravity_worker, this);

      this.message_from_words_worker = __bind(this.message_from_words_worker, this);

      var _this = this;
      this.zoom = new Zoom(this);
      this.friends = {};
      this.gravity_worker = new Worker('js/gravity_worker.js');
      this.gravity_worker.onmessage = this.message_from_gravity_worker;
      this.words_worker = new Worker('js/words_worker.js');
      this.words_worker.onmessage = this.message_from_words_worker;
      this.words_worker_ready = true;
      this.running = false;
      this.set_up_hashchange();
      this.chaos_key_timeout = -1;
      this.he_i_triggered_the_hash_change = false;
      this.button = new Button(1, "&#x25b6;", "Start/stop", "s", "", function() {
        return _this.toggle();
      });
      new Button(2, "&#x2205;", "Clear", "c", "", function() {
        return _this.clear();
      });
      new Button(2, "&#x2743;", "Randomize, repeat ", "r", "", function() {
        if ($(".chaosmeter").length > 0) {
          $(".chaosmeter").width($(".chaosmeter").width() + 10);
        } else {
          $(this).after($("<div>").addClass("chaosmeter"));
        }
        if (simulation.chaos_key_timeout > -1) {
          clearTimeout(simulation.chaos_key_timeout);
        }
        return simulation.chaos_key_timeout = setTimeout(function() {
          simulation.chaos_key_timeout = -1;
          simulation.randomize_positions($(".chaosmeter").width() * 5);
          return $(".chaosmeter").remove();
        }, 500);
      });
      new Button(3, "&#x2222;", "Find loaded users", "f", "", function() {
        if ($(".person-finder").length > 0) {
          $(".person-finder").focus();
          return;
        }
        return $("<input>").addClass("person-finder").attr("type", "text").attr("placeholder", "name / description").insertAfter(this).focus().keyup(function(event) {
          var friend, id, val, w, _ref, _results;
          $(".searching").removeClass('searching');
          val = $(this).val().toLowerCase();
          if (val.length > 0) {
            _ref = simulation.friends;
            _results = [];
            for (id in _ref) {
              friend = _ref[id];
              w = friend.words;
              w = w != null ? w : '';
              if (w.indexOf(val) >= 0) {
                _results.push(friend.div.addClass('searching'));
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          }
        }).keydown(function(event) {
          if (event.keyCode === 27) {
            $(this).remove();
            return $(".searching").removeClass('searching');
          }
        }).blur(function(event) {
          if ($(this).val().length === 0) {
            $(".searching").removeClass('searching');
            return $(this).remove();
          }
        });
      });
      this.expand_button = new Button(5, "expand", "Expand", "e", "", function() {
        var f, friend, highlighted, id, ids, min, num, _, _i, _j, _len, _len1, _ref, _results;
        highlighted = (function() {
          var _ref, _results;
          _ref = this.friends;
          _results = [];
          for (id in _ref) {
            friend = _ref[id];
            if (friend.highlight) {
              _results.push(friend);
            }
          }
          return _results;
        }).call(_this);
        if (highlighted.length === 0) {
          return alert('Impossibru');
        } else {
          ids = {};
          for (_i = 0, _len = highlighted.length; _i < _len; _i++) {
            f = highlighted[_i];
            _ref = f.friends;
            for (id in _ref) {
              _ = _ref[id];
              if (!(id in ids)) {
                ids[id] = 0;
              }
              ids[id] += 1;
            }
          }
          if (highlighted.length > 1) {
            min = parseInt(prompt('Enter the threshold X. We will then load everyone who is followd by at least X of your selected persons.'));
            if (isNaN(min) || (1 > min && min > highlighted.length)) {
              alert("Not a valid number, has to be larger than 0 and smaller than the number of people you selected (" + highlighted.length + ").");
              return;
            } else {
              for (id in ids) {
                num = ids[id];
                if (ids[id] < min) {
                  delete ids[id];
                }
              }
            }
          }
          downloader.q.tasks = [];
          _this.clear();
          for (_j = 0, _len1 = highlighted.length; _j < _len1; _j++) {
            f = highlighted[_j];
            _this.add_friend(f.id);
          }
          _results = [];
          for (id in ids) {
            _ = ids[id];
            _results.push(_this.add_friend(id));
          }
          return _results;
        }
      });
      this.expand_button.div.parent().hide();
      this.box = $("<div>").attr('id', 'box').appendTo("body");
      this.redraw();
      setTimeout(function() {
        return $(window).trigger('hashchange');
      }, 500);
    }

    Simulation.prototype.set_up_hashchange = function() {
      var _this = this;
      return $(window).bind('hashchange', function(event) {
        var a, friends, h, id, o, part, parts, _i, _j, _len, _len1, _ref, _results;
        event.preventDefault();
        if (_this.he_i_triggered_the_hash_change) {
          _this.he_i_triggered_the_hash_change = false;
          return;
        }
        h = window.location.hash;
        parts = {};
        _ref = (function() {
          var _j, _len, _ref, _results;
          _ref = (function() {
            var _k, _len, _ref, _results1;
            _ref = h.split("&");
            _results1 = [];
            for (_k = 0, _len = _ref.length; _k < _len; _k++) {
              part = _ref[_k];
              _results1.push(part.split("="));
            }
            return _results1;
          })();
          _results = [];
          for (_j = 0, _len = _ref.length; _j < _len; _j++) {
            a = _ref[_j];
            _results.push({
              key: a[0].replace('#', ''),
              value: a[1]
            });
          }
          return _results;
        })();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          o = _ref[_i];
          parts[o.key] = o.value;
        }
        _this.clear(false);
        if (typeof downloader !== "undefined" && downloader !== null) {
          downloader.visual_insert = false;
        }
        if ((parts.friends != null) && parts.friends.length > 0) {
          friends = parts.friends.split(',');
          _results = [];
          for (_j = 0, _len1 = friends.length; _j < _len1; _j++) {
            id = friends[_j];
            _results.push(_this.add_friend(id));
          }
          return _results;
        }
      });
    };

    Simulation.prototype.message_from_words_worker = function(event) {
      var div, w, _i, _len, _ref, _results;
      this.words_worker_ready = true;
      if ('console' in event.data) {
        console.log(event.data.console);
      }
      if ('words' in event.data) {
        this.friends[event.data.id].words = event.data.words;
        return this.friends[event.data.id].words_list = event.data.words.split(' ');
      } else {
        div = $("#words").empty();
        _ref = event.data;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          w = _ref[_i];
          _results.push($("<li>").text(w.word).appendTo(div));
        }
        return _results;
      }
    };

    Simulation.prototype.hash_change = function() {
      var f, friends, hash, id, zoom, _, _ref, _ref1;
      f = {};
      _ref = downloader.to_load;
      for (id in _ref) {
        _ = _ref[id];
        f[id] = 1;
      }
      _ref1 = this.friends;
      for (id in _ref1) {
        _ = _ref1[id];
        f[id] = 1;
      }
      f = (function() {
        var _results;
        _results = [];
        for (id in f) {
          _ = f[id];
          _results.push(id);
        }
        return _results;
      })();
      friends = "friends=" + (f.join(","));
      zoom = "zoom=" + this.zoom.zoom + "," + this.zoom.x + "," + this.zoom.y;
      hash = [zoom, friends].join("&");
      this.he_i_triggered_the_hash_change = true;
      return window.location.hash = "#" + hash;
    };

    Simulation.prototype.message_from_gravity_worker = function(event) {
      var d, div, fadeclass, friend, guys, id, n, pop, _i, _j, _k, _len, _len1, _ref, _ref1, _results,
        _this = this;
      if ('console' in event.data) {
        console.log(event.data.console);
      }
      if ('popular_guys' in event.data) {
        div = $("#who_is_here");
        div.empty();
        guys = event.data.guys.slice(0, 5);
        for (_i = 0, _len = guys.length; _i < _len; _i++) {
          id = guys[_i];
          $("<li>").text("@" + this.friends[id].name).appendTo(div);
        }
        if (event.data.guys.length > 5) {
          $("<li>").text("...").appendTo(div);
        }
        $("#who_to_follow").data('who_to_follow', event.data.popular_guys);
        if (this.words_worker_ready) {
          return this.words_worker.postMessage({
            friends: event.data.guys
          });
        }
      } else if ('popularity' in event.data) {
        _ref = event.data.popularity;
        _results = [];
        for (id in _ref) {
          pop = _ref[id];
          for (n = _j = 0; _j <= 10; n = ++_j) {
            this.friends[id].div.removeClass("fade" + n);
          }
          fadeclass = "fade" + pop;
          if (fadeclass !== "fadeNaN") {
            _results.push(this.friends[id].div.addClass(fadeclass));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      } else {
        _ref1 = event.data;
        for (_k = 0, _len1 = _ref1.length; _k < _len1; _k++) {
          d = _ref1[_k];
          friend = this.friends[d.id];
          friend.setX(d.x);
          friend.setY(d.y);
        }
        this.redraw();
        if (this.running) {
          return setTimeout(function() {
            return _this.gravity_worker.postMessage({
              "continue": true
            });
          }, 10);
        }
      }
    };

    Simulation.prototype.randomize_positions = function(amount) {
      var friend, id, _ref;
      if (amount == null) {
        amount = -1;
      }
      _ref = this.friends;
      for (id in _ref) {
        friend = _ref[id];
        if (!(!friend.pinned)) {
          continue;
        }
        friend.randomize_position(amount);
        this.gravity_worker.postMessage({
          id: friend.id,
          new_x: friend.x,
          new_y: friend.y
        });
      }
      return this.redraw();
    };

    Simulation.prototype.clear = function(trigger_hash) {
      var friend, id, _ref;
      if (trigger_hash == null) {
        trigger_hash = true;
      }
      this.stop();
      this.zoom.zoom = 1;
      this.zoom.x = 0;
      this.zoom.y = 0;
      this.gravity_worker.postMessage({
        'clear': true
      });
      _ref = this.friends;
      for (id in _ref) {
        friend = _ref[id];
        friend.div.remove();
      }
      this.friends = {};
      this.redraw();
      if (trigger_hash) {
        return this.hash_change();
      }
    };

    Simulation.prototype.take_hostage = function(f) {
      return this.gravity_worker.postMessage({
        id: f.id,
        force_x: f.x,
        force_y: f.y
      });
    };

    Simulation.prototype.release_hostage = function(f) {
      return this.gravity_worker.postMessage({
        release_hostage: f.id
      });
    };

    Simulation.prototype.register = function(friend) {
      friend.set_zoom(this.zoom);
      this.friends[friend.id] = friend;
      this.gravity_worker.postMessage({
        new_friend: friend.id,
        x: friend.x,
        y: friend.y,
        friends: friend.friends
      });
      this.words_worker.postMessage({
        new_friend: friend.id,
        strings: friend.get_strings(),
        friends: friend.friends
      });
      if (downloader.visual_insert) {
        if (this.lastclicked != null) {
          this.lastclicked.click();
        }
        this.lastclicked = friend;
        return friend.click();
      } else {
        return friend.redraw();
      }
    };

    Simulation.prototype.friends_loaded = function() {
      var friends, id, _ref;
      _ref = this.friends;
      for (id in _ref) {
        friends = _ref[id];
        return true;
      }
      return false;
    };

    Simulation.prototype.start = function() {
      if (this.friends_loaded()) {
        this.gravity_worker.postMessage({
          start: true
        });
        this.running = true;
        return this.button.div.html('&#x25a0;').addClass('active');
      } else {
        return alert("There are no users in the field. Load some users first.");
      }
    };

    Simulation.prototype.stop = function() {
      this.running = false;
      return this.button.div.html('&#x25b6;').removeClass('active');
    };

    Simulation.prototype.toggle = function() {
      if (this.running) {
        return this.stop();
      } else {
        return this.start();
      }
    };

    Simulation.prototype.redraw = function() {
      var canvas, ctx, friend, id, _ref, _ref1;
      this.box.css('top', this.zoom.translate_y(0)).css('left', this.zoom.translate_x(0)).css('width', "" + (this.zoom.translate_x($("body").width()) - this.zoom.translate_x(0)) + "px").css('height', "" + (this.zoom.translate_y($("body").height()) - this.zoom.translate_y(0)) + "px");
      _ref = this.friends;
      for (id in _ref) {
        friend = _ref[id];
        friend.redraw();
      }
      canvas = $("#canvas")[0];
      canvas.width--;
      canvas.width++;
      ctx = canvas.getContext("2d");
      ctx.beginPath();
      ctx.lineWidth = 3;
      _ref1 = this.friends;
      for (id in _ref1) {
        friend = _ref1[id];
        friend.redraw_lines(ctx);
      }
      ctx.strokeStyle = '#000';
      ctx.stroke();
      return update_overlay();
    };

    Simulation.prototype.redraw_lines = function() {
      var followed_by_highlighted, friend, highlighted_friend, id, other, _, _ref, _ref1, _ref2, _ref3;
      _ref = this.friends;
      for (id in _ref) {
        friend = _ref[id];
        friend.div.removeClass('follows').removeClass('followed');
        friend.lines_to = [];
      }
      _ref1 = this.friends;
      for (id in _ref1) {
        highlighted_friend = _ref1[id];
        if (!highlighted_friend.highlight) {
          continue;
        }
        _ref2 = highlighted_friend.friends;
        for (followed_by_highlighted in _ref2) {
          _ = _ref2[followed_by_highlighted];
          if (!(followed_by_highlighted in this.friends)) {
            continue;
          }
          other = this.friends[followed_by_highlighted].div;
          other.addClass('followed');
          highlighted_friend.lines_to.push(this.friends[followed_by_highlighted]);
        }
        _ref3 = this.friends;
        for (id in _ref3) {
          friend = _ref3[id];
          if (highlighted_friend.id in friend.friends) {
            other = friend.div;
            other.addClass('follows');
            friend.lines_to.push(highlighted_friend);
          }
        }
      }
      return this.redraw();
    };

    Simulation.prototype.who_is_popular_here = function(x, y) {
      return this.gravity_worker.postMessage({
        who_is_popular_here: true,
        x: x,
        y: y,
        zoom: this.zoom.zoom
      });
    };

    Simulation.prototype.add_protagonist = function(name, load_friends, load_self) {
      var _this = this;
      return downloader.q.push({
        name: name
      }, function(result) {
        var friend, id, _i, _len, _ref;
        if (result.error != null) {
          return alert("Could not retrieve @" + name + ". Either the user doesn't exist or you are being rate limited.");
        } else if (result.result["protected"]) {
          return alert("This user has a protected account. We can not see his/her friends");
        } else {
          if (load_self && !(result.result.id in _this.friends)) {
            friend = new Friend(result.result);
          }
          if (load_friends) {
            _ref = result.result.friends.ids.reverse();
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              id = _ref[_i];
              _this.add_friend(id);
            }
          }
          return _this.hash_change();
        }
      });
    };

    Simulation.prototype.add_friend = function(id) {
      var _this = this;
      downloader.to_load[id] = 1;
      return downloader.q.push({
        id: id
      }, function(result) {
        if (result.error != null) {
          return downloader.failed_downloads += 1;
        } else {
          if (id in _this.friends) {
            return;
          }
          return new Friend(result.result);
        }
      });
    };

    Simulation.prototype.check_expand_button = function() {
      var len;
      len = $(".friend.highlight").length;
      if (len > 1 || (!(this.lastclicked != null) && len > 0)) {
        return this.expand_button.div.parent().show();
      } else {
        return this.expand_button.div.parent().hide();
      }
    };

    return Simulation;

  })();

  Button = (function() {

    function Button(li_number, caption, description, keystroke, divclass, func) {
      var li,
        _this = this;
      this.div = $("<button>").html(caption).addClass(divclass).click(func).attr('title', description + ' - Hot key: ' + keystroke).hover(function() {
        return $(this).html(description);
      }, function() {
        return $(this).html(caption);
      });
      li = $("ul#menu li#li_" + li_number);
      li.append(this.div);
      shortcut.add(keystroke, function() {
        return _this.div.click();
      }, {
        disable_in_input: true
      });
    }

    return Button;

  })();

  window.Button = Button;

  $(function() {
    var i, _i;
    for (i = _i = 0; _i <= 6; i = ++_i) {
      $("<li>").attr('id', "li_" + i).appendTo($("#menu"));
    }
    window.simulation = new Simulation;
    $('body').mousewheel(function(e, delta) {
      return simulation.zoom.do_zoom(e.originalEvent.wheelDelta, e.originalEvent.pageX, e.originalEvent.pageY);
    });
    shortcut.add('space', function() {
      return simulation.toggle();
    }, {
      disable_in_input: true
    });
    shortcut.add('left', function() {
      return simulation.zoom.move(-100, 0);
    }, {
      disable_in_input: true
    });
    shortcut.add('right', function() {
      return simulation.zoom.move(100, 0);
    }, {
      disable_in_input: true
    });
    shortcut.add('up', function() {
      return simulation.zoom.move(0, -100);
    });
    shortcut.add('down', function() {
      return simulation.zoom.move(0, 100);
    });
    shortcut.add('Ctrl+up', function() {
      return simulation.zoom.do_zoom(1);
    });
    shortcut.add('Ctrl+down', function() {
      return simulation.zoom.do_zoom(-1);
    });
    if (!window.Worker) {
      return alert('Sorry, your browser does not support web workers. Try more recent versions of Chrome, Firefox, Opera or Safari');
    }
  });

}).call(this);
