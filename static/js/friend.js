// Generated by CoffeeScript 1.3.3
(function() {
  var Friend,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Friend = (function() {

    function Friend(data) {
      this.dblclick = __bind(this.dblclick, this);

      var id, title, _i, _len, _ref,
        _this = this;
      this.data = data;
      this.friends = {};
      if ((data.friends != null) && (data.friends != null) && (data.friends.ids != null)) {
        _ref = data.friends.ids;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          id = _ref[_i];
          this.friends[id] = 1;
        }
      }
      this.id = data.id;
      delete downloader.to_load[this.id];
      this.highlight = false;
      this.lines_to = [];
      this["protected"] = data["protected"];
      this.name = data.screen_name;
      this.randomize_position();
      this.hostage = false;
      this.pinned = false;
      this.words = '';
      this.words_list = [];
      title = "@" + data.screen_name;
      if ((data.description != null) && data.description.length > 0) {
        title += " - " + data.description;
      }
      title += " - followers: " + data.followers_count + " - follows: " + data.friends_count;
      this.div = $("<div>").addClass('friend').appendTo("body").attr('id', this.id).bind('click', function(event) {
        return _this.click(event);
      }).bind('dblclick', function(event) {
        return _this.dblclick(event);
      }).attr('title', title).draggable({
        start: function(event, ui) {
          _this.hostage = true;
          if (!_this.highlight) {
            _this.click();
            _this.temporary_highlight = true;
          }
          event.stopPropagation();
          return ui.helper.bind("click.prevent", function(event) {
            return event.preventDefault();
          });
        },
        drag: function(event, ui) {
          event.stopPropagation();
          _this.x = _this.zoom.translate_x_back(ui.offset.left);
          _this.y = _this.zoom.translate_y_back(ui.offset.top);
          simulation.take_hostage({
            id: _this.id,
            x: _this.x,
            y: _this.y
          });
          if (!simulation.running) {
            return simulation.redraw_lines();
          }
        },
        stop: function(event, ui) {
          if ((_this.temporary_highlight != null) && _this.temporary_highlight) {
            _this.click();
          }
          _this.temporary_highlight = false;
          _this.hostage = false;
          event.stopPropagation();
          setTimeout(function() {
            return ui.helper.unbind("click.prevent");
          }, 300);
          if (!_this.pinned) {
            return simulation.release_hostage({
              id: _this.id
            });
          }
        }
      });
      if (this["protected"]) {
        this.div.addClass('protected');
      }
      $("<img>").attr('src', data.profile_image_url).appendTo(this.div).bind('dragstart', function(event) {
        return event.preventDefault();
      });
      $("<div>").text(data.name).addClass("name").appendTo(this.div);
      simulation.register(this);
    }

    Friend.prototype.get_strings = function() {
      var s;
      s = [this.data.description, this.data.location, this.data.screen_name, this.data.name];
      if (this.data.status) {
        if (this.data.status.text) {
          s.push(this.data.status.text);
        }
      }
      return s.join(" ");
    };

    Friend.prototype.randomize_position = function(amount) {
      if (amount == null) {
        amount = -1;
      }
      if (amount > -1) {
        this.x += Math.random() * amount - amount / 2;
        return this.y += Math.random() * amount - amount / 2;
      } else {
        this.x = Math.random() * innerWidth;
        return this.y = Math.random() * innerHeight;
      }
    };

    Friend.prototype.click = function(event) {
      var f, id, _ref, _ref1;
      if ((event != null) && event.ctrlKey) {
        _ref = simulation.friends;
        for (id in _ref) {
          f = _ref[id];
          if (!f.highlight) {
            continue;
          }
          f.highlight = !f.highlight;
          f.div.toggleClass('highlight');
        }
      } else if ((event != null) && event.shiftKey) {
        _ref1 = simulation.friends;
        for (id in _ref1) {
          f = _ref1[id];
          if (!(id in this.friends && !f.highlight)) {
            continue;
          }
          f.highlight = !f.highlight;
          f.div.toggleClass('highlight');
        }
      }
      this.highlight = !this.highlight;
      this.div.toggleClass('highlight');
      simulation.redraw_lines();
      return simulation.check_expand_button();
    };

    Friend.prototype.dblclick = function() {
      this.pinned = !this.pinned;
      if (this.pinned) {
        this.div.addClass('pinned');
        return simulation.take_hostage({
          id: this.id,
          x: this.x,
          y: this.y
        });
      } else {
        simulation.release_hostage({
          id: this.id
        });
        return this.div.removeClass('pinned');
      }
    };

    Friend.prototype.setX = function(x) {
      return this.x = x;
    };

    Friend.prototype.setY = function(y) {
      return this.y = y;
    };

    Friend.prototype.redraw_lines = function(ctx) {
      var angle, dx, dy, friend, new_x, new_y, old_x, old_y, otherdiv, otherpos, pos, _i, _len, _ref, _results;
      pos = this.div.position();
      _ref = this.lines_to;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        friend = _ref[_i];
        otherdiv = friend.div;
        otherpos = otherdiv.position();
        dx = pos.left - otherpos.left;
        dy = pos.top - otherpos.top;
        angle = Math.atan2(dx, dy);
        new_x = otherpos.left + otherdiv.outerWidth() / 1.8 * Math.sin(angle);
        new_y = otherpos.top + otherdiv.outerHeight() / 1.8 * Math.cos(angle);
        old_x = pos.left - this.div.outerWidth() / 1.8 * Math.sin(angle);
        old_y = pos.top - this.div.outerHeight() / 1.8 * Math.cos(angle);
        ctx.moveTo(old_x, old_y);
        ctx.lineTo(new_x, new_y);
        this.arrow_head(ctx, angle - .50, new_x, new_y);
        _results.push(this.arrow_head(ctx, angle + .50, new_x, new_y));
      }
      return _results;
    };

    Friend.prototype.arrow_head = function(ctx, angle, x, y) {
      var line_len, new_x, new_y;
      ctx.moveTo(x, y);
      line_len = 20;
      new_x = x + line_len * Math.sin(angle);
      new_y = y + line_len * Math.cos(angle);
      return ctx.lineTo(new_x, new_y);
    };

    Friend.prototype.redraw = function() {
      if (!this.hostage) {
        return this.div.css('top', this.zoom.translate_y(this.y)).css('left', this.zoom.translate_x(this.x));
      }
    };

    Friend.prototype.set_zoom = function(zoom) {
      return this.zoom = zoom;
    };

    return Friend;

  })();

  window.Friend = Friend;

}).call(this);
