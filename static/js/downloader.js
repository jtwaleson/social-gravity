// Generated by CoffeeScript 1.3.3
(function() {
  var Downloader;

  Downloader = (function() {

    function Downloader() {}

    Downloader.prototype._cache = function(cacheUrl, success, error) {
      return $.ajax({
        url: cacheUrl,
        dataType: 'json',
        type: 'GET',
        error: function(xhr, textstatus, errorthrown) {
          if (xhr.status === 404) {
            return error();
          } else {
            return alert("Server cache error");
          }
        },
        success: function(result, a, xhr) {
          return success(result);
        }
      });
    };

    Downloader.prototype._twitter = function(twitterUrl, success, error) {
      return $.ajax({
        type: 'POST',
        url: twitterUrl,
        dataType: "jsonp",
        success: function(r, a, xhr) {
          return success(r);
        },
        timeout: 5000,
        error: error
      });
    };

    Downloader.prototype._pipes = function(twitterUrl, success, error) {
      return $.ajax({
        type: 'POST',
        data: {
          _id: '81263ca2954c525a92e8ebe02b9c5a82',
          _render: 'json',
          url: twitterUrl
        },
        url: 'http://pipes.yahoo.com/pipes/pipe.run',
        dataType: "jsonp",
        jsonp: "_callback",
        success: function(r, a, xhr) {
          if (r['count'] > 0) {
            r = r['value']['items'];
            return success(r);
          } else {
            return error();
          }
        },
        timeout: 5000,
        error: error
      });
    };

    Downloader.prototype._resolve = function(cacheUrl, twitterUrl, success, error) {
      var _this = this;
      return this._cache(cacheUrl, success, function() {
        return _this._resolve_without_cache(twitterUrl, success, error);
      });
    };

    Downloader.prototype._resolve_without_cache = function(twitterUrl, success, error) {
      var _this = this;
      return this._twitter(twitterUrl, success, function() {
        return _this._pipes(twitterUrl, success, error);
      });
    };

    Downloader.prototype.by_user_name = function(username, success, error) {
      var _this = this;
      return this._resolve('/cache/userbyname/' + username.toLowerCase(), 'http://api.twitter.com/1/users/lookup.json?screen_name=' + username, function(data) {
        if (data[0]['protected'] === false || data[0]['protected'] === 'false') {
          return _this.find_user(data, success, error);
        } else {
          return error('Protected account, impossibru');
        }
      }, function() {
        return error('Could not resolve');
      });
    };

    Downloader.prototype.by_user_id = function(id, success, error) {
      var _this = this;
      return this._resolve('/cache/user/' + id, 'http://api.twitter.com/1/users/lookup.json?user_id=' + id, function(data) {
        return _this.find_user(data, success, error);
      }, function() {
        return error('Could not resolve');
      });
    };

    Downloader.prototype.find_user = function(data, success, error) {
      var _this = this;
      if (data.length === 1) {
        data = data[0];
        if ('friends' in data) {
          return success(data);
        } else if (data['protected'] === false || data['protected'] === 'false') {
          return this.find_friends(data, success, function() {
            return error('User found, but could not find friends');
          });
        } else {
          data.friends = [];
          $.post('/cache/user/' + data.id, {
            data: JSON.stringify(data)
          });
          return success(data);
        }
      }
    };

    Downloader.prototype.find_friends = function(profile, success, error) {
      var _this = this;
      return this._resolve_without_cache('http://api.twitter.com/1/friends/ids.json?cursor=-1&user_id=' + profile['id_str'], function(data) {
        profile['friends'] = data;
        $.post('/cache/user/' + profile.id, {
          data: JSON.stringify(profile)
        });
        return success(profile);
      }, error);
    };

    return Downloader;

  })();

  window.Downloader = Downloader;

  $(function() {
    var btn, downloader, li;
    downloader = new Downloader;
    btn = $("<button>").addClass("glow").text("+").click(function(event) {
      var _this = this;
      $(this).removeClass('glow');
      return downloader.by_user_name('jtwaleson', function(data) {
        var friend, id, _i, _len, _ref, _results;
        friend = new Friend(data);
        _ref = data.friends[0].ids;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          id = _ref[_i];
          _results.push((function(id) {
            var _this = this;
            return downloader.by_user_id(id, function(data) {
              return new Friend(data);
            }, function(message) {
              return alert(message);
            });
          })(id));
        }
        return _results;
      }, function(message) {
        return alert(message);
      });
    });
    li = $("<li>");
    li.append(btn);
    return li.appendTo($("#menu"));
  });

}).call(this);
