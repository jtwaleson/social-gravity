// Generated by CoffeeScript 1.3.3
(function() {
  var friends, move, randomize, start, stop;

  friends = {};

  stop = false;

  move = function(a, b_x, b_y, amount) {
    var d, dx, dy, mx, my, px, py;
    dx = a.x - b_x;
    dy = a.y - b_y;
    if (dx === 0 && dy === 0) {
      return;
    }
    if (dx === 0) {
      dx = 0.001;
    }
    if (dy === 0) {
      dy = 0.001;
    }
    d = dx * dx + dy * dy;
    if (dx * dx > dy * dy) {
      px = 1;
      py = Math.abs(dy / dx);
    } else {
      px = Math.abs(dx / dy);
      py = 1;
    }
    if (dx < 0) {
      px *= -1;
    }
    if (dy < 0) {
      py *= -1;
    }
    mx = amount * px;
    my = amount * py;
    if (Math.abs(mx) > Math.abs(dx)) {
      mx = dx;
    }
    if (Math.abs(my) > Math.abs(dy)) {
      my = dy;
    }
    friends[a.id].x -= mx;
    return friends[a.id].y -= my;
  };

  start = function() {
    var friendA, friendB, i, idA, idB, k, list;
    if (stop) {
      stop = false;
      return;
    }
    for (idA in friends) {
      friendA = friends[idA];
      for (idB in friends) {
        friendB = friends[idB];
        if (idA in friendB.friends) {
          if (idB in friendA.friends) {
            move(friendA, friendB.x, friendB.y, 5);
          } else {
            move(friendA, friendB.y, friendB.y, 1);
          }
        }
      }
    }
    list = (function() {
      var _results;
      _results = [];
      for (k in friends) {
        i = friends[k];
        _results.push({
          id: i.id,
          x: i.x,
          y: i.y
        });
      }
      return _results;
    })();
    postMessage(list);
    return setTimeout(start, 0);
  };

  randomize = function(friend) {
    friend.x += Math.random() * 4 - 2;
    friend.y += Math.random() * 4 - 2;
    return postMessage([
      {
        id: friend.id,
        x: friend.x,
        y: friend.y
      }
    ]);
  };

  this.onmessage = function(event) {
    var f, _i, _len, _ref, _results;
    if ('new_friend' in event.data) {
      friends[event.data.new_friend] = {
        x: event.data.x,
        y: event.data.y,
        id: event.data.new_friend,
        friends: {}
      };
      if ('friends' in event.data) {
        _ref = event.data.friends;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          f = _ref[_i];
          _results.push(friends[event.data.new_friend].friends[f] = 1);
        }
        return _results;
      }
    } else if ('stop' in event.data) {
      return stop = true;
    } else if ('start' in event.data) {
      return start();
    }
  };

}).call(this);
